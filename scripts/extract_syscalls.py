#!/usr/bin/env python

'''
Generate syscall tables from the Linux source tree. Used to generate
manticore/platforms/linux_syscalls.py.

Usage:

    ./extract_syscalls.py [linux src tree] linux_syscalls.py

'''

import os
import sys
import argparse

arch_tables = {
    'armv7': 'arch/arm/tools/syscall.tbl',
    'i386':  'arch/x86/entry/syscalls/syscall_32.tbl',
    'amd64': 'arch/x86/entry/syscalls/syscall_64.tbl'
}


if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Generate syscall tables')
    parser.add_argument('linux', help='Linux source tree')
    parser.add_argument('output', help='Python output to generate tables')
    args = parser.parse_args()
    base = args.linux

    output = open(args.output, 'w+')
    output.write('#\n#\n# AUTOGENERATED, DO NOT EDIT\n#\n')
    with open(os.path.join(base, 'Makefile')) as makefile:
        version = []
        for _, line in zip(range(3), makefile.readlines()):
            version.append(line.strip().split('=')[1].strip())
        output.write('# From version: {}\n#\n\n'.format('.'.join(version)))

    for arch, path in arch_tables.items():
        table = {}
        with open(os.path.join(base, path)) as tbl:
            output.write('{} = {{\n'.format(arch))
            for line in tbl.readlines():
                line = line.strip()
                if line.startswith('#'):
                    continue
                columns = line.split()
                if len(columns) < 4:
                    continue
                num, abi, name, entry = columns[:4]
                output.write('    {}: "{}",\n'.format(num, entry))
            output.write('}\n')
        

